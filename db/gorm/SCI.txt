func (dialector Dialector) Name() string
func (dialector Dialector) NowFunc(n int) func() time.Time
func (dialector Dialector) Apply(config *gorm.Config) error
func (dialector Dialector) Initialize(db *gorm.DB) (err error)
func (dialector Dialector) ClauseBuilders() map[string]clause.ClauseBuilder
func (dialector Dialector) DefaultValueOf(field *schema.Field) clause.Expression
func (dialector Dialector) Migrator(db *gorm.DB) gorm.Migrator
func (dialector Dialector) BindVarTo(writer clause.Writer, stmt *gorm.Statement, v interface{})
func (dialector Dialector) QuoteTo(writer clause.Writer, str string)
func (dialector Dialector) Explain(sql string, vars ...interface{}) string
func (dialector Dialector) DataTypeOf(field *schema.Field) string
func (dialector Dialector) getSchemaFloatType(field *schema.Field) string
func (dialector Dialector) getSchemaStringType(field *schema.Field) string
func (dialector Dialector) getSchemaTimeType(field *schema.Field) string
func (dialector Dialector) getSchemaBytesType(field *schema.Field) string
func (dialector Dialector) getSchemaIntAndUnitType(field *schema.Field) string
func (dialector Dialector) getSchemaCustomType(field *schema.Field) string
func (dialector Dialector) SavePoint(tx *gorm.DB, name string) error
func (dialector Dialector) RollbackTo(tx *gorm.DB, name string) error

通过调用Statement的AddClause向Statement中添加clause
各种clause都拥有一个Build(writer)的方法, 此方法将SQL语句写入writer
Statement中有一个SQL字段, 这个字段是stringbuilder
Statement遍历自己的clause列表, 对每个clause调用Build, 并将自己作为参数传给Build
所以clause代表的SQL语句最终会写入到Statement.SQL这个字段中, 这个字段是一个string

func (stmt *Statement) WriteString(str string) (int, error) // 向stmt.SQL中写入str
func (stmt *Statement) WriteByte(c byte) error              // 向stmt.SQL中写入c
func (stmt *Statement) WriteQuoted(value interface{})
func (stmt *Statement) QuoteTo(writer clause.Writer, field interface{})
func (stmt *Statement) Quote(field interface{}) string
func (stmt *Statement) AddVar(writer clause.Writer, vars ...interface{})
func (stmt *Statement) AddClause(v clause.Interface)
func (stmt *Statement) AddClauseIfNotExists(v clause.Interface)
func (stmt *Statement) BuildCondition(query interface{}, args ...interface{}) []clause.Expression
func (stmt *Statement) Build(clauses ...string)
func (stmt *Statement) Parse(value interface{}) (err error)
func (stmt *Statement) ParseWithSpecialTableName(value interface{}, specialTableName string) (err error)
func (stmt *Statement) clone() *Statement
func (stmt *Statement) SetColumn(name string, value interface{}, fromCallbacks ...bool)
func (stmt *Statement) Changed(fields ...string) bool
func (stmt *Statement) SelectAndOmitColumns(requireCreate, requireUpdate bool) (map[string]bool, bool)


