c.Request 是 http标准库的http请求
c.Request.Body 是用户POST的数据, []byte
c.Request.ParseForm()之后, c.Request.Form 和 c.Request.PostForm 就可以用了
c.Request.Form      map[string][]string  既包含URL中的参数, 也包含Post中的参数
c.Request.PostForm  map[string][]string  只包含Post数据
使用o-playground/validator  tag为  `binding:""`


GIN的调用连(中间件)
用户的VIEW函数也当作中间件来处理
考虑如下场景
r := gin.Default()
r.GET("/test", a, b, c, d, e, f)
函数链如下 [a b c d e f]
a 在代码中间部分调用了 next()
b 在代码中间部分调用了 next()
c 没有调用 next()
d 没有调用 next()
e 在代码中间部分调用了 next()
f 没有调用 next()
注: 即使f调用 next() 也没事, 因为f后面没有函数了, 不会报错


           +---------+          +---------+          +---------+          +---------+          +---------+              +---------+
           |         |          |         |          |         |          |         |          |         |              |         |
in  +------> a_start |    +-----> b_start |    +-----> c_start |    +-----> d_start |    +-----> e_start |   +----------> f_start |
           |    +    |    |     |    +    |    |     |    +    |    |     |    +    |    |     |    +    |   |          |    +    |
           |    |    |    |     |    |    |    |     |    |    |    |     |    |    |    |     |    |    |   |          |    |    |
           |    |    |    |     |    |    |    |     |    |    |    |     |    |    |    |     |    |    |   |          |    |    |
           |    |    |    |     |    |    |    |     |    |    |    |     |    |    |    |     |    |    |   |          |    |    |
           |    |    |    |     |    |    |    |     |    |    |    |     |    |    |    |     |    |    |   |          |    |    |
           |    v    |    |     |    v    |    |     |    v    |    |     |    v    |    |     |    v    |   |          |    v    |
           |  next   +----+     |  next   +----+     |  c_end  +----+     |  d_end  +----+     |  next   +---+          |  f_end  +----+
           |         |          |         |          |         |          |         |          |         |              |         |    |
           |         |          |         |          |         |          |         |          |         |              |         |    |
           |         |          |         |          |         |          |         |          |         |              |         |    |
           |         |          |         |          |         |          |         |          |         |              |         |    |
           |         |          |         |          |         |          |         |          |         |              |         |    |
           |         |          |         |          |         |          |         |          |         |              |         |    |
out <------+  a_end  <----------+  b_end  <------+   |         |          |         |    +-----+  e_end  <----------+   |         |    |
           |         |          |         |      |   |         |          |         |    |     |         |          |   |         |    |
           +---------+          +---------+      |   +---------+          +---------+    |     +---------+          |   +---------+    |
                                                 |                                       |                          |                  |
                                                 +---------------------------------------+                          +------------------+


解释:
从start开始, 如果遇到了next函数, 则函数跳转到下一个函数的start开始执行
如果没有遇到next, 则运行到本函数的end, 然后=执行下一个函数的start
一直到最后一个函数, 然后开始从后往前运行各函数的end部分, 已经运行过了的end则不在运行
如果想中断后面的函数的执行, 请执行c.Abort()