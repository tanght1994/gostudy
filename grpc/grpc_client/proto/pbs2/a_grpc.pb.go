// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: proto/pbs2/a.proto

package pbs2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S2Client is the client API for S2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S2Client interface {
	ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (S2_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (S2_ClientStreamClient, error)
	TwoWayStream(ctx context.Context, opts ...grpc.CallOption) (S2_TwoWayStreamClient, error)
}

type s2Client struct {
	cc grpc.ClientConnInterface
}

func NewS2Client(cc grpc.ClientConnInterface) S2Client {
	return &s2Client{cc}
}

func (c *s2Client) ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (S2_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &S2_ServiceDesc.Streams[0], "/S2/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &s2ServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type S2_ServerStreamClient interface {
	Recv() (*ServerStreamRes, error)
	grpc.ClientStream
}

type s2ServerStreamClient struct {
	grpc.ClientStream
}

func (x *s2ServerStreamClient) Recv() (*ServerStreamRes, error) {
	m := new(ServerStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *s2Client) ClientStream(ctx context.Context, opts ...grpc.CallOption) (S2_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &S2_ServiceDesc.Streams[1], "/S2/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &s2ClientStreamClient{stream}
	return x, nil
}

type S2_ClientStreamClient interface {
	Send(*ClientStreamReq) error
	CloseAndRecv() (*ClientStreamRes, error)
	grpc.ClientStream
}

type s2ClientStreamClient struct {
	grpc.ClientStream
}

func (x *s2ClientStreamClient) Send(m *ClientStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *s2ClientStreamClient) CloseAndRecv() (*ClientStreamRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *s2Client) TwoWayStream(ctx context.Context, opts ...grpc.CallOption) (S2_TwoWayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &S2_ServiceDesc.Streams[2], "/S2/TwoWayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &s2TwoWayStreamClient{stream}
	return x, nil
}

type S2_TwoWayStreamClient interface {
	Send(*TwoWayStreamReq) error
	Recv() (*TwoWayStreamRes, error)
	grpc.ClientStream
}

type s2TwoWayStreamClient struct {
	grpc.ClientStream
}

func (x *s2TwoWayStreamClient) Send(m *TwoWayStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *s2TwoWayStreamClient) Recv() (*TwoWayStreamRes, error) {
	m := new(TwoWayStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S2Server is the server API for S2 service.
// All implementations must embed UnimplementedS2Server
// for forward compatibility
type S2Server interface {
	ServerStream(*ServerStreamReq, S2_ServerStreamServer) error
	ClientStream(S2_ClientStreamServer) error
	TwoWayStream(S2_TwoWayStreamServer) error
	mustEmbedUnimplementedS2Server()
}

// UnimplementedS2Server must be embedded to have forward compatible implementations.
type UnimplementedS2Server struct {
}

func (UnimplementedS2Server) ServerStream(*ServerStreamReq, S2_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedS2Server) ClientStream(S2_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedS2Server) TwoWayStream(S2_TwoWayStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TwoWayStream not implemented")
}
func (UnimplementedS2Server) mustEmbedUnimplementedS2Server() {}

// UnsafeS2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S2Server will
// result in compilation errors.
type UnsafeS2Server interface {
	mustEmbedUnimplementedS2Server()
}

func RegisterS2Server(s grpc.ServiceRegistrar, srv S2Server) {
	s.RegisterService(&S2_ServiceDesc, srv)
}

func _S2_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(S2Server).ServerStream(m, &s2ServerStreamServer{stream})
}

type S2_ServerStreamServer interface {
	Send(*ServerStreamRes) error
	grpc.ServerStream
}

type s2ServerStreamServer struct {
	grpc.ServerStream
}

func (x *s2ServerStreamServer) Send(m *ServerStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func _S2_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S2Server).ClientStream(&s2ClientStreamServer{stream})
}

type S2_ClientStreamServer interface {
	SendAndClose(*ClientStreamRes) error
	Recv() (*ClientStreamReq, error)
	grpc.ServerStream
}

type s2ClientStreamServer struct {
	grpc.ServerStream
}

func (x *s2ClientStreamServer) SendAndClose(m *ClientStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *s2ClientStreamServer) Recv() (*ClientStreamReq, error) {
	m := new(ClientStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _S2_TwoWayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S2Server).TwoWayStream(&s2TwoWayStreamServer{stream})
}

type S2_TwoWayStreamServer interface {
	Send(*TwoWayStreamRes) error
	Recv() (*TwoWayStreamReq, error)
	grpc.ServerStream
}

type s2TwoWayStreamServer struct {
	grpc.ServerStream
}

func (x *s2TwoWayStreamServer) Send(m *TwoWayStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *s2TwoWayStreamServer) Recv() (*TwoWayStreamReq, error) {
	m := new(TwoWayStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S2_ServiceDesc is the grpc.ServiceDesc for S2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "S2",
	HandlerType: (*S2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _S2_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _S2_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TwoWayStream",
			Handler:       _S2_TwoWayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pbs2/a.proto",
}
