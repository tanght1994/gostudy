// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: proto/pbs1/a.proto

package pbs1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S1Client is the client API for S1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S1Client interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error)
	Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRes, error)
}

type s1Client struct {
	cc grpc.ClientConnInterface
}

func NewS1Client(cc grpc.ClientConnInterface) S1Client {
	return &s1Client{cc}
}

func (c *s1Client) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error) {
	out := new(HelloRes)
	err := c.cc.Invoke(ctx, "/S1/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s1Client) Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRes, error) {
	out := new(HiRes)
	err := c.cc.Invoke(ctx, "/S1/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S1Server is the server API for S1 service.
// All implementations must embed UnimplementedS1Server
// for forward compatibility
type S1Server interface {
	Hello(context.Context, *HelloReq) (*HelloRes, error)
	Hi(context.Context, *HiReq) (*HiRes, error)
	mustEmbedUnimplementedS1Server()
}

// UnimplementedS1Server must be embedded to have forward compatible implementations.
type UnimplementedS1Server struct {
}

func (UnimplementedS1Server) Hello(context.Context, *HelloReq) (*HelloRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedS1Server) Hi(context.Context, *HiReq) (*HiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedS1Server) mustEmbedUnimplementedS1Server() {}

// UnsafeS1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S1Server will
// result in compilation errors.
type UnsafeS1Server interface {
	mustEmbedUnimplementedS1Server()
}

func RegisterS1Server(s grpc.ServiceRegistrar, srv S1Server) {
	s.RegisterService(&S1_ServiceDesc, srv)
}

func _S1_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S1Server).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/S1/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S1Server).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _S1_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S1Server).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/S1/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S1Server).Hi(ctx, req.(*HiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// S1_ServiceDesc is the grpc.ServiceDesc for S1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "S1",
	HandlerType: (*S1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _S1_Hello_Handler,
		},
		{
			MethodName: "Hi",
			Handler:    _S1_Hi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pbs1/a.proto",
}
